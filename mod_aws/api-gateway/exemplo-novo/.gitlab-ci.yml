stages:
  - prepare
  - validate
  - plan
  - apply
  - destroy

image: 
  name: hashicorp/terraform:0.13.0
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

variables:
  PLAN: planfile

# cache:
#   paths:
#     - .terraform

setup:Dev:
  stage: prepare
  tags:
    - shell
  script:
    - mkdir tmp
    - echo dev > tmp/env
  artifacts:
    paths:
      - tmp/
  only:
    - develop

setup:Qa:
  stage: prepare
  tags:
    - shell
  script:
    - mkdir tmp
    - echo qa > tmp/env
  artifacts:
    paths:
      - tmp/
  only:
    - master

setup:Prod:
  stage: prepare
  tags:
    - shell
  script:
    - mkdir tmp
    - echo prod > tmp/env
  artifacts:
    paths:
      - tmp/
  only:
    - tags

Validate:
  stage: validate
  before_script:
    - export ENV=$(cat tmp/env)
    - if [ "$ENV" == "prod" ]; then export AWS_ACCESS_KEY_ID=$LZ_AWS_ACCESS_KEY_ID_PRD; else export AWS_ACCESS_KEY_ID=$LZ_AWS_ACCESS_KEY_ID; fi
    - if [ "$ENV" == "prod" ]; then export AWS_SECRET_ACCESS_KEY=$LZ_AWS_SECRET_ACCESS_KEY_PRD; else export AWS_SECRET_ACCESS_KEY=$LZ_AWS_SECRET_ACCESS_KEY; fi
    - sed -i s,#access_key#,$AWS_ACCESS_KEY_ID,g main.tf
    - sed -i s,#secret_key#,$AWS_SECRET_ACCESS_KEY,g main.tf
    - sed -i s,#env#,$ENV,g main.tf
  script:
    - terraform -version
    - terraform init
    - terraform validate
    # - terraform fmt -check=true

plan:
  stage: plan
  before_script:
    - export ENV=$(cat tmp/env)
    - if [ "$ENV" == "prod" ]; then export AWS_ACCESS_KEY_ID=$LZ_AWS_ACCESS_KEY_ID_PRD; else export AWS_ACCESS_KEY_ID=$LZ_AWS_ACCESS_KEY_ID; fi
    - if [ "$ENV" == "prod" ]; then export AWS_SECRET_ACCESS_KEY=$LZ_AWS_SECRET_ACCESS_KEY_PRD; else export AWS_SECRET_ACCESS_KEY=$LZ_AWS_SECRET_ACCESS_KEY; fi
    - sed -i s,#access_key#,$AWS_ACCESS_KEY_ID,g main.tf
    - sed -i s,#secret_key#,$AWS_SECRET_ACCESS_KEY,g main.tf
    - sed -i s,#env#,$ENV,g main.tf
  script:
    - terraform init
    - terraform plan -var-file=./tfvars/$ENV.tfvars -out=$PLAN
  artifacts:
    paths:
      - $PLAN

apply:
  stage: apply
  before_script:
    - export ENV=$(cat tmp/env)
    - if [ "$ENV" == "prod" ]; then export AWS_ACCESS_KEY_ID=$LZ_AWS_ACCESS_KEY_ID_PRD; else export AWS_ACCESS_KEY_ID=$LZ_AWS_ACCESS_KEY_ID; fi
    - if [ "$ENV" == "prod" ]; then export AWS_SECRET_ACCESS_KEY=$LZ_AWS_SECRET_ACCESS_KEY_PRD; else export AWS_SECRET_ACCESS_KEY=$LZ_AWS_SECRET_ACCESS_KEY; fi
    - sed -i s,#access_key#,$AWS_ACCESS_KEY_ID,g main.tf
    - sed -i s,#secret_key#,$AWS_SECRET_ACCESS_KEY,g main.tf
    - sed -i s,#env#,$ENV,g main.tf
  script:
    - terraform init
    - terraform apply -var-file=./tfvars/$ENV.tfvars -auto-approve
  allow_failure: true
  when: manual
  only:
    - develop
    - master
    - tags

destroy:
  stage: destroy
  before_script:
    - export ENV=$(cat tmp/env)
    - if [ "$ENV" == "prod" ]; then export AWS_ACCESS_KEY_ID=$LZ_AWS_ACCESS_KEY_ID_PRD; else export AWS_ACCESS_KEY_ID=$LZ_AWS_ACCESS_KEY_ID; fi
    - if [ "$ENV" == "prod" ]; then export AWS_SECRET_ACCESS_KEY=$LZ_AWS_SECRET_ACCESS_KEY_PRD; else export AWS_SECRET_ACCESS_KEY=$LZ_AWS_SECRET_ACCESS_KEY; fi
    - sed -i s,#access_key#,$AWS_ACCESS_KEY_ID,g main.tf
    - sed -i s,#secret_key#,$AWS_SECRET_ACCESS_KEY,g main.tf
    - sed -i s,#env#,$ENV,g main.tf
  script:
    - terraform init
    - terraform destroy -var-file=./tfvars/$ENV.tfvars -auto-approve
  when: manual
  only:
    - develop
    - master
    - tags